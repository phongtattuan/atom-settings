{
  "name": "api-benchmark",
  "version": "0.2.3",
  "description": "A simple nodejs tool to measure and compare performances of api services",
  "author": {
    "name": "Matteo Figus",
    "email": "matteofigus@gmail.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matteofigus/api-benchmark.git"
  },
  "bugs": {
    "url": "https://github.com/matteofigus/api-benchmark/issues"
  },
  "homepage": "http://www.api-benchmark.com/",
  "keywords": [
    "benchmark",
    "api",
    "performance",
    "test",
    "load balancer",
    "deployment",
    "continuous delivery"
  ],
  "main": "index.js",
  "engines": {
    "node": ">=0.8.x",
    "npm": ">=1.2.x"
  },
  "dependencies": {
    "superagent": "0.19.0",
    "underscore": "1.6.0",
    "give-me": "0.1.0"
  },
  "devDependencies": {
    "http-test-servers": "0.0.12",
    "jshint": "2.5.10",
    "mocha": "",
    "should": "3.3.2"
  },
  "scripts": {
    "pretest": "jshint lib test templates index.js",
    "test": "node test/index"
  },
  "contributors": [
    {
      "name": "Michael Sanford",
      "email": "michaelsanford0@gmail.com"
    },
    {
      "name": "Derek Myers",
      "email": "arcticpro@gmail.com"
    }
  ],
  "gitHead": "2d273ad2615839d7e84c9a5f17e07e88175029d7",
  "readme": "api-benchmark\n=============\n\nA node.js tool that measures and compares performances of single and multiple apis inspired by [BenchmarkJs](http://benchmarkjs.com/).\n[Why all of this?](http://tech.opentable.co.uk/blog/2014/02/28/api-benchmark/)\n\n![https://raw.github.com/matteofigus/api-benchmark-www/master/public/images/screen-shot.png](https://raw.github.com/matteofigus/api-benchmark-www/master/public/images/screen-shot.png)\n\nTo see an example of a request/response [look at this gist](https://gist.github.com/matteofigus/6651234).\n\nIf you want to benchmark your api via [grunt](http://gruntjs.com/) take a look at [grunt-api-benchmark](https://github.com/matteofigus/grunt-api-benchmark).\n\n1. [Requirements](#requirements)\n1. [Installation](#installation)\n1. [Usage](#usage)\n  1. API\n    * [`measure`](#measureservice-routes-options--callback)\n    * [`compare`](#compareservices-routes-options--callback)\n    * [`getHtml`](#gethtmlresults-callback)\n  1. [The `Route` object](#route-object)\n  1. [The `Options` object](#options-object)\n1. [Tuning your machine to benchmark](#tuning)\n1. [Contributing](#contributing)\n1. [Why all of this?](http://tech.opentable.co.uk/blog/2014/02/28/api-benchmark/)\n\n# Requirements\n\nNode version: min: **0.8.0**, recommended: **>=0.10.13**\n\nBuild status: Unix: [![Build Status](https://secure.travis-ci.org/matteofigus/api-benchmark.png?branch=master)](http://travis-ci.org/matteofigus/api-benchmark) | Windows: [![Build status](https://ci.appveyor.com/api/projects/status/7lo2m92rg4cy47u7/branch/master?svg=true)](https://ci.appveyor.com/project/matteofigus/api-benchmark/branch/master)\n\n[![NPM](https://nodei.co/npm/api-benchmark.png?downloads=true)](https://npmjs.org/package/api-benchmark)\n\n# Installation\n\n```shell\nnpm install api-benchmark\n```\n\n# Usage\n\n### measure(service, [routes](#route-object), [[options](#options-object), ] callback)\n\nMeasures performances of a given api for multiple routes\n\n```js\nvar apiBenchmark = require('api-benchmark');\n\nvar service = {\n  server1: \"http://myserver:myport/mypath/\"\n};\n\nvar routes = { route1: 'route1', route2: 'route2' };\n\napiBenchmark.measure(service, routes, function(err, results){\n  console.log(results);\n  // displays some stats!\n});\n```\n\n### compare(services, [routes](#route-object), [[options](#options-object), ] callback)\n\nCompares performances of a given list of api servers with the same routes. Useful in case of load balancers, globalised services, deployment of new versions.\n\n```js\nvar apiBenchmark = require('api-benchmark');\n\nvar services = {\n  server1: \"http://myserver:myport/mypath/\",\n  server2: \"http://myserver2:myport2/mypath2/\",\n};\n\nvar routes = { route1: 'route1', route2: 'route2' };\n\napiBenchmark.compare(services, routes, function(err, results){\n  console.log(results);\n  // displays some stats, including the winner!\n});\n```\n\nAll the Http verbs and headers are supported.\n\n```js\nvar apiBenchmark = require('api-benchmark');\n\nvar services = {\n  server1: \"http://myserver:myport/mypath/\",\n  server2: \"http://myserver2:myport2/mypath2/\",\n};\n\nvar routes = {\n  route1: {\n    method: 'get',\n    route: 'getRoute',\n    headers: {\n      'Cookie': 'cookieName=value',\n      'Accept': 'application/json'\n    }\n  },\n  route2: 'getRoute2',\n  route3: {\n    method: 'post',\n    route: 'postRoute',\n    data: {\n      test: true,\n      moreData: 'aString'\n    }\n  }\n};\n\napiBenchmark.compare(services, routes, function(err, results){\n  console.log(results);\n  // displays some stats, including the winner!\n});\n```\n\n### getHtml(results, callback)\nGiven a results object, gets the html report.\n```js\nvar apiBenchmark = require('api-benchmark');\n\nvar service = {\n  server1: \"http://myserver:myport/mypath/\"\n};\n\nvar routes = { route1: 'route1', route2: 'route2' };\n\napiBenchmark.measure(service, routes, function(err, results){\n  apiBenchmark.getHtml(results, function(error, html){\n    console.log(html);\n    // now save it yourself to a file and enjoy\n  });\n});\n```\n\n### Route object\n\n#### method\n  (String, default 'get'): Http verb.\n\n#### route\n  (String): the route to benchmark\n\n#### headers\n  (Object): the headers to send. In case of function (that has to return an object) it will be evaulated for each request.\n\n#### data\n  (Object): the data sent with the request. In case of function (that has to return an object) it will be evaulated for each request.\n\n#### query\n  (Object): the query sent with the request. In case of function (that has to return an object) it will be evaulated for each request.\n\n#### expectedStatusCode\n  (Number, default null): if it is a number, generates an error when the status code of the response is different\n\n#### maxMean\n  (Number, default null): if it is a number, generates an error when the mean value for a benchmark cycle is major than the expected value\n\n#### maxSingleMean\n  (Number, default null): if it is a number, generates an error when the mean across all the concurrent requests value is major than the expected value\n\n### Options object\n\n#### debug\n  (Boolean, default false): Displays some info on the console.\n\n#### runMode\n  (String, default 'sequence'): Can be 'sequence' (each request is made after receiving the previous response) or 'parallel' (all requests are made in parallel).\n\n#### maxConcurrentRequests\n  (Number, default 100): When in runMode='parallel' it is the maximum number of concurrent requests are made.\n\n#### delay\n  (Number, default 0): When in runMode='sequence', it is the delay between test cycles (secs).\n\n#### maxTime\n  (Number, default 10): The maximum time a benchmark is allowed to run before finishing (secs).\n  Note: Cycle delays aren't counted toward the maximum time.\n\n#### minSamples\n  (Number, default 20): The minimum sample size required to perform statistical analysis.\n\n#### stopOnError\n  (Boolean, default true): Stops the benchmark as soon as it receives an error. When false, the benchmark goes on and the errors are collected inside the callback.\n\n# Tuning\nYou should tune your machine to remove any OS limits in terms of opening and quickly recycling sockets.\n\n### Linux and Mac OS X\n```sh\nsudo sysctl -w kern.maxfiles=25000\nsudo sysctl -w kern.maxfilesperproc=24500\nsudo sysctl -w kern.ipc.somaxconn=20000\nulimit -S -n 20000\n```\n\n# Contributing\n\nFor the latest updates and release information follow [@matteofigus](https://twitter.com/matteofigus) on twitter.\nFeel free to open new Issues in case of Bugs or Feature requests.\nPull requests are welcome: first run all the tests locally doing `npm test`.\n\nContributors:\n\n* [Derek Myers](https://github.com/dmyers)\n* [Michael Sanford](https://github.com/michaelsanford)\n\n### Tests\n\n```shell\nnpm test\n```\n\n### TODO\n\n* Command-line simple interface\n* Multi-thread requests\n* SOAP\n* Killer mode - [ask for details](https://twitter.com/matteofigus)\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "api-benchmark@0.2.3",
  "_shasum": "7762b1fc1e70634672ab2e8dec85de3d160de9de",
  "_from": "git://github.com/KunihikoKido/api-benchmark.git",
  "_resolved": "git://github.com/KunihikoKido/api-benchmark.git#2d273ad2615839d7e84c9a5f17e07e88175029d7"
}
