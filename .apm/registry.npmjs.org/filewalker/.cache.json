{"_id":"filewalker","_rev":"19-d8973be440a32c08882489d0a3c2d58b","name":"filewalker","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","dist-tags":{"latest":"0.1.2"},"versions":{"0.0.0":{"name":"filewalker","version":"0.0.0","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.0.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"0014dcf3befc8797e576372b2dff999b874932bd","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.0.0.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.0.1":{"name":"filewalker","version":"0.0.1","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"git://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.0.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.9","_nodeVersion":"v0.6.13","_defaultsLoaded":true,"dist":{"shasum":"e87189d87fe8a723bdae079e9bf8562d24fb9cdc","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.0.1.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.0.2":{"name":"filewalker","version":"0.0.2","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"git://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.0.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"34bf1332ab1a90a58235b91f9e859ae101545045","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.0.2.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.0.3":{"name":"filewalker","version":"0.0.3","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"git://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.0.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"ce31e080c919323e9b435b3b3edab1c6c82c29e9","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.0.3.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.1.0":{"name":"filewalker","version":"0.1.0","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"git://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{"fqueue":"0.0.x"},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.1.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"8476cf88d8f9c84dcb46b03ff949de4fe5f5a6d0","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.1.0.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.1.1":{"name":"filewalker","version":"0.1.1","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"git://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{"fqueue":"0.0.x"},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"_id":"filewalker@0.1.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.16","_nodeVersion":"v0.6.15","_defaultsLoaded":true,"dist":{"shasum":"00968898f180a42a170053e7f40a4d1b47d797c5","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.1.1.tgz"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]},"0.1.2":{"name":"filewalker","version":"0.1.2","description":"Fast and rock-solid asynchronous traversing of directories and files for node.js","author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"https://github.com/oleics/node-filewalker.git"},"contributors":[],"main":"./lib/filewalker","directories":{"lib":"./lib"},"engines":{"node":">= 0.4.x"},"dependencies":{"fqueue":"0.0.x"},"scripts":{"test":"mocha -R spec"},"devDependencies":{"mocha":"1.0.x"},"readme":"\r\nNode Filewalker\r\n===============\r\n\r\n### Fast and rock-solid asynchronous traversing of directories and files for node.js\r\n\r\n[![Build Status](https://secure.travis-ci.org/oleics/node-filewalker.png)](http://travis-ci.org/oleics/node-filewalker)\r\n\r\nThe filewalker-module for node is designed to provide maximum  \r\nreliance paired with maximum throughput/performance and the  \r\nability to throttle that throughput/performance.\r\n\r\n### Installation\r\n\r\n```npm install filewalker```\r\n\r\n### Run the tests\r\n\r\n```sh\r\n$ npm test\r\n```\r\n\r\n### Usage\r\n\r\nSimple directory listing and disk-usage report:\r\n\r\n```js\r\nvar filewalker = require('filewalker');\r\n\r\nfilewalker('.')\r\n  .on('dir', function(p) {\r\n    console.log('dir:  %s', p);\r\n  })\r\n  .on('file', function(p, s) {\r\n    console.log('file: %s, %d bytes', p, s.size);\r\n  })\r\n  .on('error', function(err) {\r\n    console.error(err);\r\n  })\r\n  .on('done', function() {\r\n    console.log('%d dirs, %d files, %d bytes', this.dirs, this.files, this.bytes);\r\n  })\r\n.walk();\r\n```\r\n\r\nCalculate md5-hash for every file:\r\n\r\n```js\r\nvar started = Date.now();\r\n\r\nvar createHash = require('crypto').createHash,\r\n    filewalker = require('./lib/filewalker');\r\n\r\nvar options = {\r\n  maxPending: 10, // throttle handles\r\n};\r\n\r\nfilewalker('/', options)\r\n  .on('stream', function(rs, p, s, fullPath) {\r\n    var hash = createHash('md5');\r\n    rs.on('data', function(data) {\r\n      hash.update(data);\r\n    });\r\n    rs.on('end', function(data) {\r\n      console.log(hash.digest('hex'), ('                '+s.size).slice(-16), p);\r\n    });\r\n  })\r\n  .on('error', function(err) {\r\n    console.error(err);\r\n  })\r\n  .on('done', function() {\r\n    var duration = Date.now()-started;\r\n    console.log('%d ms', duration);\r\n    console.log('%d dirs, %d files, %d bytes', this.dirs, this.files, this.bytes);\r\n  })\r\n.walk();\r\n```\r\n\r\nClass Filewalker\r\n----------------\r\n\r\nInherits from [node-fqueue](https://github.com/oleics/node-fqueue)\r\n\r\n### Options\r\n\r\n```maxPending``` (default: -1)  \r\nMaximum asynchronous jobs.  \r\nUseful to throttle the number of simultaneous disk-operations.\r\n\r\n```maxAttempts``` (default: 3)  \r\nMaximum reattempts on error.  \r\nSet to 0 to disable reattempts.  \r\nSet to -1 for infinite reattempts.\r\n\r\n```attemptTimeout``` (default: 5000 ms)  \r\nMinimum time to wait before reattempt. In milliseconds.  \r\nUseful to let network-drives remount, etc.\r\n\r\n```matchRegExp``` (default: null)  \r\nA RegExp-instance the path to a file must match in order to  \r\nemit a \"file\" event. Set to ```null``` to emit all paths.\r\n\r\n```recursive``` (default: true)  \r\nTraverse in a recursive manner.  \r\nIn case you wish to target only the current directory,  \r\ndisable this.\r\n\r\n### Properties\r\n\r\nmaxPending  \r\nmaxAttempts  \r\nattemptTimeout  \r\nmatchRegExp\r\n\r\npending  \r\ndirs  \r\nfiles  \r\ntotal  \r\nbytes  \r\nerrors  \r\nattempts  \r\nstreamed  \r\nopen  \r\ndetectedMaxOpen\r\n\r\n### Methods\r\n\r\nwalk()  \r\npause()  \r\nresume()\r\n\r\n### Events\r\n\r\n* file\r\n  * relative path\r\n  * fs.Stats instance\r\n  * absolute path\r\n* dir\r\n  * relative path\r\n  * fs.Stats instance\r\n  * absolute path\r\n* stream\r\n  * fs.ReadStream instance\r\n  * relative path\r\n  * fs.Stats instance\r\n  * absolute path\r\n* pause\r\n* resume\r\n* done\r\n* error\r\n  * instance of Error\r\n\r\nNotice: There will be no fs.ReadStream created if no listener  \r\nlistens to the 'stream'-event.\r\n\r\nMIT License\r\n-----------\r\n\r\nCopyright (c) Oliver Leics <oliver.leics@gmail.com>\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/oleics/node-filewalker/issues"},"_id":"filewalker@0.1.2","dist":{"shasum":"215bf0eb2703d4faadfc5b8a104e7aa70a4331f1","tarball":"http://registry.npmjs.org/filewalker/-/filewalker-0.1.2.tgz"},"_from":".","_npmVersion":"1.2.32","_npmUser":{"name":"pureppl","email":"pureppl@gmail.com"},"maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}]}},"readme":"\nFilewalker\n==========\n\n### Fast and rock-solid asynchronous traversing of directories and files for node.js\n\n[![Build Status](https://secure.travis-ci.org/oleics/node-filewalker.png)](http://travis-ci.org/oleics/node-filewalker)\n\nThe filewalker-module for node is designed to provide maximum  \nreliance paired with maximum throughput/performance and the  \nability to throttle that throughput/performance.\n\n### Installation\n\n```npm install filewalker```\n\n### Usage\n\nSimple directory listing and disk-usage report:\n\n```js\nvar filewalker = require('filewalker');\n\nfilewalker('.')\n  .on('dir', function(p) {\n    console.log('dir:  %s', p);\n  })\n  .on('file', function(p, s) {\n    console.log('file: %s, %d bytes', p, s.size);\n  })\n  .on('error', function(err) {\n    console.error(err);\n  })\n  .on('done', function() {\n    console.log('%d dirs, %d files, %d bytes', this.dirs, this.files, this.bytes);\n  })\n.walk();\n```\n\nCalculate md5-hash for every file:\n\n```js\nvar started = Date.now();\n\nvar createHash = require('crypto').createHash,\n    filewalker = require('./lib/filewalker');\n\nvar options = {\n  maxPending: 10, // throttle handles\n};\n\nfilewalker('c:/', options)\n  .on('stream', function(rs, p, s, fullPath) {\n    var hash = createHash('md5');\n    rs.on('data', function(data) {\n      hash.update(data);\n    });\n    rs.on('end', function(data) {\n      console.log(hash.digest('hex'), ('                '+s.size).slice(-16), p);\n    });\n  })\n  .on('error', function(err) {\n    console.error(err);\n  })\n  .on('done', function() {\n    var duration = Date.now()-started;\n    console.log('%d ms', duration);\n    console.log('%d dirs, %d files, %d bytes', this.dirs, this.files, this.bytes);\n  })\n.walk();\n```\n\nClass Filewalker\n----------------\n\nInherits from events.EventEmitter\n\n### Options\n\n```maxPending``` (default: -1)  \nMaximum asynchronous jobs.  \nUseful to throttle the number of simultaneous disk-operations.\n\n```maxAttempts``` (default: 3)  \nMaximum reattempts on error.  \nSet to 0 to disable reattempts.  \nSet to -1 for infinite reattempts.\n\n```attemptTimeout``` (default: 5000 ms)  \nMinimum time to wait before reattempt. In milliseconds.  \nUseful to let network-drives remount, etc.\n\n```matchRegExp``` (default: null)  \nA RegExp-instance the path to a file must match in order to  \nemit a \"file\" event. Set to ```null``` to emit all paths.\n\n### Properties\n\nmaxPending  \nmaxAttempts  \nattemptTimeout  \nmatchRegExp\n\npending  \ndirs  \nfiles  \ntotal  \nbytes  \nerrors  \nattempts  \nstreamed  \nstreamErrors  \nopen  \ndetectedMaxOpen  \n\n### Methods\n\nwalk()  \npause()  \nresume()\n\n### Events\n\n* file\n  * relative path\n  * fs.Stats instance\n  * absolute path\n* dir\n  * relative path\n  * fs.Stats instance\n  * absolute path\n* stream\n  * fs.ReadStream instance\n  * relative path\n  * fs.Stats instance\n  * absolute path\n* pause\n* resume\n* done\n* error\n  * instance of Error\n\nNotice: There will be no fs.ReadStream created if no listener  \nlistens to the 'stream'-event.\n\nMIT License\n-----------\n\nCopyright (c) Oliver Leics <oliver.leics@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","maintainers":[{"name":"pureppl","email":"pureppl@gmail.com"}],"time":{"modified":"2013-06-25T21:43:04.689Z","created":"2012-04-02T20:04:19.324Z","0.0.0":"2012-04-02T20:04:21.852Z","0.0.1":"2012-04-02T20:39:03.644Z","0.0.2":"2012-04-13T22:16:58.613Z","0.0.3":"2012-04-15T21:33:42.936Z","0.1.0":"2012-04-15T23:45:36.929Z","0.1.1":"2012-04-16T10:09:44.714Z","0.1.2":"2013-06-25T21:43:04.689Z"},"author":{"name":"Oliver Leics","email":"oliver.leics@gmail.com"},"repository":{"type":"git","url":"https://github.com/oleics/node-filewalker.git"},"_attachments":{},"_etag":"\"5CVNTJK6DHTX4UFTAX38NWBAS\""}